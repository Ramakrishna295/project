package com.nkxgen.spring.jdbc.model;

import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.EntityTransaction;
import javax.persistence.Persistence;
import javax.persistence.PersistenceContext;
import javax.persistence.TypedQuery;
import javax.transaction.Transactional;

import org.springframework.stereotype.Repository;

@Repository
@Transactional
public class TransactionsDAO implements TransactionsInterface {

	@PersistenceContext
	private EntityManager entityManager;

	@Override
	public void moneyDeposit(TempAccounts tempacc) {
		// TODO Auto-generated method stub
		System.out.println("Deposits loki vachanu");
		TempAccounts account = entityManager.find(TempAccounts.class, tempacc.getAcnt_id());
		account.setBalance(30);
		
//		String querystring = "UPDATE TempAccounts SET balance = balance + :depositAmount WHERE acnt_id = :accountId";
//		TypedQuery<TempAccounts> query= entityManager.createQuery(querystring,TempAccounts.class);
//		query.setParameter("depositAmount",tempacc.getBalance());
//		query.setParameter("accountId",tempacc.getAcnt_id());

	}
	@Override
	public void moneyDeposit(int Acnt_id)
	{
		//TempAccounts account = entityManager.find(TempAccounts.class, Acnt_id );
		//account.setBalance(30);
		EntityManagerFactory emf = Persistence.createEntityManagerFactory("yourPersistenceUnitName");
	    EntityManager em = emf.createEntityManager();
	    EntityTransaction transaction = em.getTransaction();

	    try {
	        transaction.begin();

	        TempAccounts account = getAccountById( Acnt_id);
	        System.out.println("--------------------------------------");
	        if (account != null) {
	            account.setBalance(5000);
	            System.out.println("--------------------------------------");
	            em.merge(account);
	            System.out.println("--------------------------------------");
	            transaction.commit();
	        } else {
	            // Handle the case where the account does not exist
	        }
	    } catch (Exception e) {
	        if (transaction.isActive()) {
	            transaction.rollback();
	        }
	        e.printStackTrace();
	        // Handle the exception appropriately
	    } finally {
	        em.close();
	        emf.close();
	    }
	
	}

	@Override
	public void loanRepayment() {
		// TODO Auto-generated method stub

	}

	@Override
	public void interestDeposit() {
		// TODO Auto-generated method stub

	}

	@Override
	public void moneyWithdrawl() {
		// TODO Auto-generated method stub

	}

	@Override
	public void loanWithdrawl() {
		// TODO Auto-generated method stub

	}

	public TempAccounts getAccountById(int id) {
		System.out.println("trasnactions loki vachanu");
		TempAccounts account = entityManager.find(TempAccounts.class, id);
		return account;

	}

}
